R: Core Skills for Reproducible Research
========================================================
width:1200

Maja Zalo&#x17e;nik

31.10.2016

```{r setup, echo=FALSE, message=FALSE, warning = FALSE}
require(knitr)
opts_knit$set(root.dir = "C:/Users/sfos0247/Dropbox/XtraWork/R stuff/RepResCoreSkillsR")
#opts_knit$set(root.dir = "/home/mz/Documents/Copy/Dropbox/XtraWork/R stuff/RepResCoreSkillsR")

opts_chunk$set(warning=FALSE, message=FALSE)
options(scipen=999, digits=4)


```

Outline
========================================================
incremental: false
- Reproducible Research
- RStudio and project management
- Good coding practices in R
- Importing and cleaning data
- Standard control structures
- Vectorisation and `apply` functions
- Writing your own functions
- Data manipulation with `dplyr`
- Piping/chaining commands

Rules
========================================================
- Don't forget to mention the rules! 

Preparation
========================================================

Go to this url:  [http://tinyurl.com/RCSRepRes](http://tinyurl.com/RCSRepRes)

- click on the green button `Clone or download`
- select Download zip
- save it to your PC
- rightclick on the file and select `Extract all`
- then open the `RepResCoreSkillsR.Rproj` file which should lauch RStudio


RStudio
========================================================
incremental: false
- *Best* IDE for R
- Project management
- Version control
- knitting and direct publishing
- Interactive graphics
- ... 

Project management
========================================================
incremental: false

R project-level files:
- *project* -- .Rproj
- *workspace* -- .RData  
- *history* -- .Rhistory
- *settings* -- .Rprofile

Scripts -- .R

Data -- .csv, .xls, .dat ... 

Figures

Presentation -- .pdf, .doc, .html, (.tex)

Good Coding Practice
========================================================
incremental: true

![source: https://xkcd.com/1513/](../../figures/code_quality.png)

- [Google's R Style Guide](https://google.github.io/styleguide/Rguide.xml)
- [Hadley Wickham's Style Guide](http://adv-r.had.co.nz/Style.html)
- COMMENT EVERYTHING


Janitor work
========================================================
incremental: true
> Data scientists, according to interviews and expert estimates, spend from 50 percent to 80 percent of their time mired in this more mundane labor of collecting and preparing unruly digital data, before it can be explored for useful nuggets. <p style="text-align: right;"><a href="http://www.nytimes.com/2014/08/18/technology/for-big-data-scientists-hurdle-to-insights-is-janitor-work.html?_r=0">source: NY Times</a></p>

* Data formats and sources 
* `tidyr` package
  + `spread()` and  `gather()`
  + `separate()` and  `unite()`
  
Tidy Data
========================================================
incremental:true
> *Tidy datasets are all alike but every messy dataset is messy in its own way.* - Hadley Wickham

1. Each variable forms a column.
2. Each observation forms a row.
3. Each type of observational unit forms a table.


Tidy Data - spread()
========================================================
```{r, echo=FALSE}
messy.02 <- read.table("data/demo/messy.02.txt")
messy.02
```

Tidy Data - spread()
========================================================
```{r, echo=c(3:4)}
require(tidyr)
require(dplyr)
tidy.02 <- spread(messy.02, key = var.name, value = var.value)
tidy.02
```


Tidy Data -- key : value pairs
========================================================

```{r, eval=FALSE}
Country: Norway
Country: Slovenia 
...
Year: 2010
Year: 2050

Population: 4891300
Population: 2003136
...
Density: 16.07489
Density: 20.91484
...

```

Tidy data: 
* each column name is a *key*
* each cell is a *value*

Tidy Data - gather()
========================================================
incremental:true
```{r, echo=FALSE}
messy.01 <- read.table("data/demo/messy.01.txt")
messy.01
```

```{r, echo=c(3,5)}
require(tidyr)
require(dplyr)
tidy.01 <- gather(messy.01, year, population, 2:3)
tidy.01 <-  mutate(tidy.01, year=ifelse(year=="X2010", 2010, 2050))
tidy.01
```

Tidy Data - separate() 
========================================================
```{r, echo=FALSE}
messy.03 <- read.table("data/demo/messy.03.txt")
messy.03
```
Tidy Data - separate() 
========================================================
```{r}
tidy.03 <- separate(messy.03, double.key, c("year", "key"))
tidy.03
```

Tidy Data - unite() 
========================================================
```{r}
messy.again <- unite(tidy.03, new.double.key, key, year,  
                     sep = " in the year ")
messy.again
```

Tidy Data - Resources
========================================================
For an excellent write-up of the main `tidyr` functions see Garrett Grolemund's post here [http://garrettgman.github.io/tidying/](http://garrettgman.github.io/tidying/).

For a quick tidyr cheat-sheet stick this to your wall: [Data Wrangling Cheatsheet](https://www.rstudio.com/wp-content/uploads/2015/02/data-wrangling-cheatsheet.pdf), also available in the `literature` folder of this course's repository. 


Practical I. - project setup and data tidying
========================================================

P1.i Start a new project and organize the folder structure

P1.ii Import and clean some data
- Comma separated values (`.csv`)
- Excel files
- Unzipping an SPSS file

P1.iii Data Tidying

Today: only `.csv` files, then run `load("data/economic.situation.RData")`, then data tidying. 


Efficient Coding Practices
========================================================
incremental:false

* Standard control structures
  + Conditional execution
  + Looping
* Vectorisation and `apply` family of functions
* Writing your own functions
* Data manipulation with `dplyr`
  + Sub-setting
  + Grouping
  + Making new variables
  + Piping/chaining daisies 

Conditional execution
========================================================
incremental:true
```{r, eval=FALSE}
if (condition) {
  # do something
} else {
  # do something else
}
```

```{r}
x <- runif(1) # randum number from uniform distribution [0,1]
if (x >= 0.6) {
  print("Good")
} else {
  if (x <= 0.4) {
    print("Bad")
  } else {
    print("Not Sure")}
}
```

Conditional execution - conditions and operators
========================================================
incremental:true
```{r, eval=FALSE}
x == y   # x is equal to y
x != y   # x is not equal to y
x > y    # x is greater than y
x < y    # x is less than y
x <= y   # x is less than or equal to y
x >= y   # x is greater than or equal to y
x %in% y  # x is located in y
TRUE     # 
FALSE    #
```

```{r, eval=FALSE}
!x        # NOT
x & y     # AND
x | y     # OR
xor(x, y)  # exclusive OR
```

Conditional execution - vectorised
========================================================
incremental:true
```{r, eval=FALSE}
ifelse(condition, yes, no)
```

```{r}
x <- runif(20) # 20 randum numbers from uniform distribution [0,1]
ifelse(x >= 0.6, "G", 
       ifelse(x<=0.4, "B", "N"))
```



Looping - for() loop
========================================================
incremental:true
```{r, eval=FALSE}
for (i in seq) expr
```

```{r}
mat <- matrix(NA, nrow=3, ncol=3)
for (i in 1:3){
  for (j in 1:3){
    mat[i,j] <- paste(i, j, sep="-")
  }
} 
mat
```



Vectorisation - apply()
========================================================
incremental:true
```{r, eval=FALSE}
apply(X, MARGIN, FUN, ...)
```

```{r}
mat <- matrix(1:9, 3,3)
# row totals
apply(mat, 1, sum)
# column totals
apply(mat, 2, sum)
```

Vectorisation - apply() vs for()
========================================================
incremental:true
```{r}
mat <- matrix(sample(1:100, 25), 5,5)
mat

# find the second largest value in each row
out <- vector()
for (i in 1:nrow(mat)) {
  out[i] <- sort(mat[i,], decreasing = TRUE)[2]
}
``` 
Vectorisation - apply() vs for()
========================================================
incremental:true
```{r}
for (i in 1:nrow(mat)) {
  out[i] <- sort(mat[i,], decreasing = TRUE)[2]
}
out
# using apply()
apply(mat, 1, function(x) sort(x, decreasing = TRUE)[2])
```
Vectorisation - lapply() and sapply()
========================================================
incremental:true
```{r}
# a list of elements with different lengths:
test <- list(a = 1:5, b = 20:100, c = 17234) 
lapply(test, min)
sapply(test, min)
```
Vectorisation - lapply() and sapply()
========================================================
incremental:true
```{r}

# a data frame (list of three vectors of equal length):
test <- data.frame(a = 1:5, b = 6:10, c = 11:15) 
lapply(test, mean)
sapply(test, mean)
```
Writing your own functions
========================================================
incremental:true

```{r, eval = FALSE}
function.name <- function(arguments, ...) {
  expression
  (return value)
}
```

Writing your own functions
========================================================
incremental:true
```{r, echo = FALSE}
tidy.population2010 <- read.table("data/demo/pop.csv")
```
```{r}
FunSecondLargest <-function(x) {
  r <- sort(x, decreasing = TRUE)[2]
  return(r)
}
```
```{r}
# now let's try it out with a sample vector
test.vector <- tidy.population2010$population

FunSecondLargest(test.vector)  
apply(mat, 1, FunSecondLargest)
```

Writing your own functions
========================================================
incremental:true

```{r}
# Function for extracting the n-th largest value from a vector
# Agruments: x - vector,  n - optional integer value for rank
# Output:returns single value 
FunNthLargest <-function(x, n=1) {
  r <- sort(x, decreasing = TRUE)[n]
  return(r)
}
```
```{r}
FunNthLargest(test.vector)  
FunNthLargest(test.vector, n=2)  
FunNthLargest(test.vector, n=3)  
```

Practical II
========================================================
```{r, eval=FALSE}
###########################################################
## CONDITIONAL EXPR, LOOPS, APPLY AND FUNCTIONS
###########################################################
## 3.1 Conditional expressions and logical operators 
## 3.2 For() loops
## 3.3 Funciton writing
## 3.4 Use your function inside an apply statement
## 3.5 Bar-Plotting function
###########################################################


```

Data manipulation with `dplyr`
========================================================

* Sub-setting:
  + `filter()`
  + `select()`
* Calculating:
  + `mutate()`
  + `summarise()`
* Helpers:
  + `group_by()` and `ungroup()`
  + `arrange()`

Filtering - rows
========================================================
incremental:true

```{r, eval = FALSE}
filter(data, criteria)
```


```{r}
filter(tidy.population2010, 
       AREA_KM2 < 1000 & population > 10000 & AGE == 0)
```

Selecting - columns
========================================================
incremental:true

```{r, eval = FALSE}
select(data, list)
```
```{r, echo = FALSE}
tidy.economic.situation <- read.table("data/demo/econ.csv")
```

```{r}
select(tidy.economic.situation, bad, good, neutral)
```

Selecting - columns
========================================================
incremental:true
```{r, eval = FALSE}
# all the columns between bad and neutral
select(tidy.economic.situation, bad:neutral)
# all but the perception column
select(tidy.economic.situation, -perception)
# contains a dot in the name:
select(tidy.economic.situation, contains("."))
# starts with the letter p
select(tidy.economic.situation, starts_with("p"))
# ends with the letter d
select(tidy.economic.situation, ends_with("d"))
# contains the text "n"
select(tidy.economic.situation, contains("n"))
```

```{r, eval = FALSE}
# change order of columns by name
select(tidy.economic.situation,income.group:bad, neutral, good:perception), n=3
# we can also do this using the columns' respective indices instead
select(tidy.economic.situation, 1,2,4,3,5), n=3
```

Calculating - new variables (columns)
========================================================
incremental:true
```{r, eval = FALSE}
# scale the values so they all sum up to 100
mutate(tidy.economic.situation, 
       total = bad+neutral+good, 
       bad.s = bad/total*100,
       good.s = good/total*100,
       neutral.s = neutral/total*100
)
```

```{r, echo = FALSE}
tidy.economic.situation <- mutate(tidy.economic.situation, total = bad+neutral+good, 
                                  bad.s = bad/total*100,
                                  good.s = good/total*100,
                                  neutral.s = neutral/total*100
)
# we can now use select to remove the old ones
tidy.economic.situation <- select(tidy.economic.situation, -bad, - good, -neutral, 
                                  -total)
tidy.economic.situation
```

Calculating - new observations (rows)
========================================================
incremental:true

```{r, eval = FALSE}
summarise(data, new.var = summary.function(column))
```

```{r}
summarise(tidy.population2010, 
          av.pop = mean(population), 
          av.area = mean(AREA_KM2), 
          count = n(), 
          second = FunSecondLargest(population))
```

Calculating - new observations (rows) - grouped
========================================================
incremental:true
```{r}
gr <- group_by(tidy.population2010, AGE)
summarise(gr, pop = mean(population), 
          area = mean(AREA_KM2), 
          count = n(), 
          second = FunSecondLargest(population))
```

Sorting data
========================================================
incremental:true

```{r}
# `arrange()` for data sorting on columns
arrange(tidy.economic.situation, perception, desc(bad.s))
```

Joining tables
========================================================

- `left_join(a, b)` -- keeps all rows in first table
- `right_join(a, b)` -- keeps all rows in second table
- `inner_join(a, b)` -- only keeps rows present in both a and b
- `full_join(a, b)` -- keeps all rows



Piping
========================================================

<div align="center">
<img src="../../figures/pipe.jpg" height=500>
</div> <p style="text-align: right;"><small>[Photo by Joe Cross](https://www.flickr.com/photos/jaycross/2869212451)</small> </p>

Without Piping
========================================================
incremental:true

```{r}
data.subset <-  filter(tidy.population2010, AREA_KM2 < 2000 & population > 15000 & AGE == 0)
```
```{r}
data.subset2 <- select(data.subset, -AGE) 
```
```{r}
data.subset3 <-  mutate(data.subset2, density = population/AREA_KM2) 
```
```{r}
data.grouped <-   group_by(data.subset3, NAME)
```
```{r}
summarise(data.grouped, count = n(), mean.density = mean(density)) 
```

With Piping
========================================================
incremental:true
```{r}
tidy.population2010 %>%
  filter(AREA_KM2 < 2000 & population > 15000 & AGE == 0) %>%
  select(-AGE) %>%
  mutate(density = population/AREA_KM2) %>%
  group_by(NAME) %>%
  summarise(count = n(), mean.density = mean(density)) -> final.table
```
```{r}
final.table
```


PRACTICAL III
========================================================

```{r}
##########################################################
## PIPING and POPULATION PYRAMIDS
##########################################################
## 4.0 Practice piping on population2010
## 4.1 Write a function to extract population pyramid data
## 4.2 Write a function to plot the output of 4.1
##########################################################
```

PRACTICAL III.i
========================================================
```{r}
##########################################################
## 4.0 Practice piping on population2010
##########################################################
```
Using the `population2010.csv` file find the answers to the following:

* How many 20 year-old males were there in Tanzania in 2010
* Which country has the lowest total population?
* In which country do women outnuber men in the most age groups?

PRACTICAL III.I solutions
========================================================
incremental:true

```{r}

# How many 20 year-old males were there in Tanzania in 2010
tidy.population2010 %>%
  filter(FIPS == "TZ" & AGE == 20 & sex == "male")
```

PRACTICAL III.I solutions
========================================================
incremental:true

```{r}
# Which country has the lowest total population?
tidy.population2010 %>%
  group_by(NAME) %>%
  summarise( population = sum(population)) %>%
  arrange(population)

```

PRACTICAL III.I solutions
========================================================
incremental:true

```{r}
# In which country do women outnuber men in the most age groups?
tidy.population2010 %>%
  spread(sex, population) %>%
  mutate(morewomen = ifelse(female > male, 1, 0)) %>%
  filter(morewomen == 1) %>%
  group_by(NAME) %>%
  summarise(most.ages = sum(morewomen)) %>%
  arrange(desc(most.ages))
```